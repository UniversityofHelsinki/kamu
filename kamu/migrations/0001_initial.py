# Generated by Django 4.2.9 on 2024-02-15 12:21

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import kamu.validators.identity


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Contract",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("checksum", models.CharField(max_length=64, verbose_name="Checksum")),
                ("lang", models.CharField(max_length=2, verbose_name="Language")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
            ],
            options={
                "verbose_name": "Contract",
                "verbose_name_plural": "Contracts",
            },
        ),
        migrations.CreateModel(
            name="ContractTemplate",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.CharField(max_length=20, verbose_name="Contract type")),
                ("version", models.SmallIntegerField(verbose_name="Contract version")),
                ("name_fi", models.CharField(max_length=100, verbose_name="Contract name (fi)")),
                ("name_en", models.CharField(max_length=100, verbose_name="Contract name (en)")),
                ("name_sv", models.CharField(max_length=100, verbose_name="Contract name (sv)")),
                ("text_fi", models.TextField(verbose_name="Contract text (fi)")),
                ("text_en", models.TextField(verbose_name="Contract text (en)")),
                ("text_sv", models.TextField(verbose_name="Contract text (sv)")),
                ("public", models.BooleanField(default=False, verbose_name="Public")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
            ],
            options={
                "verbose_name": "Contract template",
                "verbose_name_plural": "Contract templates",
            },
        ),
        migrations.CreateModel(
            name="EmailAddress",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "address",
                    models.CharField(
                        max_length=320,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email address",
                    ),
                ),
                ("priority", models.SmallIntegerField(default=0, verbose_name="Priority")),
                ("verified", models.BooleanField(default=False, verbose_name="Verified")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "E-mail address",
                "verbose_name_plural": "E-mail addresses",
                "ordering": ["identity", "verified", "priority"],
            },
        ),
        migrations.CreateModel(
            name="Identifier",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("fpic", "Finnish national identification number"),
                            ("eidas", "eIDAS identifier"),
                            ("eppn", "eduPersonPrincipalName"),
                            ("google", "Google account"),
                            ("microsoft", "Microsoft account"),
                            ("kamu", "Kamu identifier"),
                        ],
                        max_length=10,
                        verbose_name="Identifier type",
                    ),
                ),
                ("value", models.CharField(max_length=4000, verbose_name="Identifier value")),
                ("verified", models.BooleanField(default=False, verbose_name="Verified")),
                ("deactivated_at", models.DateTimeField(blank=True, null=True, verbose_name="Deactivated at")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "Identifier",
                "verbose_name_plural": "Identifiers",
            },
        ),
        migrations.CreateModel(
            name="Identity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "kamu_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Unique identifier for this identity.",
                        unique=True,
                        verbose_name="Kamu ID",
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True, verbose_name="User identifier"
                    ),
                ),
                (
                    "external",
                    models.BooleanField(
                        default=False,
                        help_text="This identity is managed in another registry.",
                        verbose_name="External identity",
                    ),
                ),
                (
                    "assurance_level",
                    models.SmallIntegerField(
                        choices=[
                            (0, "No assurance level"),
                            (1, "Low, self-asserted with a verified email-address"),
                            (2, "Medium, verified from a government issued photo-ID"),
                            (3, "High, eIDAS substantial level or similar"),
                        ],
                        default=0,
                        help_text="How strongly this user identity is identified.",
                        verbose_name="Assurance level",
                    ),
                ),
                (
                    "given_names",
                    models.CharField(
                        blank=True, help_text="All official first names.", max_length=200, verbose_name="Given names"
                    ),
                ),
                (
                    "given_names_verification",
                    models.SmallIntegerField(
                        choices=[
                            (0, "No verification"),
                            (1, "Self assurance"),
                            (2, "External source"),
                            (3, "Verified from a government issued photo-ID"),
                            (4, "Strong electrical verification"),
                        ],
                        default=0,
                        verbose_name="Given names verification method",
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        blank=True, help_text="Official surname(s).", max_length=200, verbose_name="Surname"
                    ),
                ),
                (
                    "surname_verification",
                    models.SmallIntegerField(
                        choices=[
                            (0, "No verification"),
                            (1, "Self assurance"),
                            (2, "External source"),
                            (3, "Verified from a government issued photo-ID"),
                            (4, "Strong electrical verification"),
                        ],
                        default=0,
                        verbose_name="Surname verification method",
                    ),
                ),
                (
                    "given_name_display",
                    models.CharField(
                        blank=True,
                        help_text="A given name or nickname part of the user's display name.",
                        max_length=200,
                        verbose_name="Displayed given name",
                    ),
                ),
                (
                    "surname_display",
                    models.CharField(
                        blank=True,
                        help_text="A surname part of the user's display name.",
                        max_length=200,
                        verbose_name="Displayed surname",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Required for the user identification from the official identity documents.",
                        null=True,
                        verbose_name="Date of birth",
                    ),
                ),
                (
                    "date_of_birth_verification",
                    models.SmallIntegerField(
                        choices=[
                            (0, "No verification"),
                            (1, "Self assurance"),
                            (2, "External source"),
                            (3, "Verified from a government issued photo-ID"),
                            (4, "Strong electrical verification"),
                        ],
                        default=0,
                        verbose_name="Date of birth verification method",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other"), ("U", "Unknown")],
                        default="U",
                        help_text="Used for statistical purposes.",
                        max_length=1,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "nationality_verification",
                    models.SmallIntegerField(
                        choices=[
                            (0, "No verification"),
                            (1, "Self assurance"),
                            (2, "External source"),
                            (3, "Verified from a government issued photo-ID"),
                            (4, "Strong electrical verification"),
                        ],
                        default=0,
                        verbose_name="Nationality verification method",
                    ),
                ),
                (
                    "fpic",
                    models.CharField(
                        blank=True,
                        help_text="Used for the strong electrical identification.",
                        max_length=11,
                        null=True,
                        unique=True,
                        validators=[kamu.validators.identity.FpicValidator()],
                        verbose_name="Finnish personal identity code",
                    ),
                ),
                (
                    "fpic_verification",
                    models.SmallIntegerField(
                        choices=[
                            (0, "No verification"),
                            (1, "Self assurance"),
                            (2, "External source"),
                            (3, "Verified from a government issued photo-ID"),
                            (4, "Strong electrical verification"),
                        ],
                        default=0,
                        verbose_name="FPIC verification method",
                    ),
                ),
                (
                    "preferred_language",
                    models.CharField(
                        choices=[("en", "English"), ("fi", "Finnish"), ("sv", "Swedish")],
                        default="en",
                        help_text="Preferred service language.",
                        max_length=2,
                        verbose_name="Preferred language",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "Identity",
                "verbose_name_plural": "Identities",
                "permissions": [
                    ("view_basic_information", "Can view basic information"),
                    ("change_basic_information", "Can change basic information"),
                    ("view_restricted_information", "Can view restricted information"),
                    ("change_restricted_information", "Can change restricted information"),
                    ("view_contacts", "Can view contact information"),
                    ("change_contacts", "Can change contact information"),
                    ("view_contracts", "Can view contract information"),
                    ("view_identifiers", "Can view identifiers"),
                    ("change_identifiers", "Can change identifiers"),
                    ("search_identities", "Can search identities"),
                    ("combine_identities", "Can combine identities"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "invite_email_address",
                    models.EmailField(blank=True, max_length=254, null=True, verbose_name="Invite email address"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("invited", "Invited"),
                            ("require", "Waiting requirements"),
                            ("approval", "Waiting approval"),
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("expired", "Expired"),
                        ],
                        max_length=10,
                        verbose_name="Membership status",
                    ),
                ),
                ("reason", models.TextField(verbose_name="Membership reason")),
                ("start_date", models.DateField(verbose_name="Membership start date")),
                ("expire_date", models.DateField(verbose_name="Membership expire date")),
                (
                    "requirements_failed_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Requirements failed time"),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "Membership",
                "verbose_name_plural": "Memberships",
                "ordering": ["role__identifier", "expire_date"],
            },
        ),
        migrations.CreateModel(
            name="Nationality",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.CharField(max_length=2, unique=True, verbose_name="Country code")),
                ("name_fi", models.CharField(max_length=100, verbose_name="Country name (fi)")),
                ("name_en", models.CharField(max_length=100, verbose_name="Country name (en)")),
                ("name_sv", models.CharField(max_length=100, verbose_name="Country name (sv)")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "Nationality",
                "verbose_name_plural": "Nationalities",
            },
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("identifier", models.CharField(max_length=20, unique=True, verbose_name="Permission identifier")),
                ("name_fi", models.CharField(max_length=50, verbose_name="Permission name (fi)")),
                ("name_en", models.CharField(max_length=50, verbose_name="Permission name (en)")),
                ("name_sv", models.CharField(max_length=50, verbose_name="Permission name (sv)")),
                ("description_fi", models.CharField(max_length=255, verbose_name="Permission description (fi)")),
                ("description_en", models.CharField(max_length=255, verbose_name="Permission description (en)")),
                ("description_sv", models.CharField(max_length=255, verbose_name="Permission description (sv)")),
                ("cost", models.IntegerField(verbose_name="Permission cost")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "Permission",
                "verbose_name_plural": "Permissions",
                "ordering": ["identifier"],
            },
        ),
        migrations.CreateModel(
            name="PhoneNumber",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("number", models.CharField(max_length=20, verbose_name="Phone number")),
                ("priority", models.SmallIntegerField(default=0, verbose_name="Priority")),
                ("verified", models.BooleanField(default=False, verbose_name="Verified")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "Phone number",
                "verbose_name_plural": "Phone numbers",
                "ordering": ["identity", "verified", "priority"],
            },
        ),
        migrations.CreateModel(
            name="Requirement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name_fi", models.CharField(max_length=50, verbose_name="Requirement name (fi)")),
                ("name_en", models.CharField(max_length=50, verbose_name="Requirement name (en)")),
                ("name_sv", models.CharField(max_length=50, verbose_name="Requirement name (sv)")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("contract", "Requires a signed contract of type (value)"),
                            ("attribute", "User attribute (value) is defined"),
                            ("assurance", "Assurance level at least the level"),
                            ("external", "External requirement"),
                        ],
                        max_length=20,
                        verbose_name="Requirement type",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=255, verbose_name="Requirement value")),
                (
                    "level",
                    models.IntegerField(
                        default=0,
                        help_text="Require a minimum level of assurance or attribute verification level, or a minimum "
                        "version of contract. Contract level must be positive integer. Assurance levels are from 1 "
                        "(low) to 3 (high) and attribute verification levels are from 1 (self assured) to 4 (strong "
                        "electrical verification)",
                        verbose_name="Level or version required",
                    ),
                ),
                (
                    "grace",
                    models.IntegerField(
                        default=0,
                        help_text="Grace time (days) before membership status is changed.",
                        verbose_name="Grace time (days)",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
            ],
            options={
                "verbose_name": "Requirement",
                "verbose_name_plural": "Requirements",
                "ordering": ["type"],
            },
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("phone_number", models.CharField(blank=True, max_length=20, verbose_name="Phone number")),
                (
                    "email_address",
                    models.CharField(
                        blank=True,
                        max_length=320,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email address",
                    ),
                ),
                (
                    "token_type",
                    models.CharField(
                        choices=[
                            ("emaillogin", "E-mail login token"),
                            ("phonelogin", "SMS login token"),
                            ("emailobjectverif", "E-mail object verification token"),
                            ("phoneobjectverif", "Phone object verification token"),
                            ("emailaddrverif", "E-mail address verification token"),
                            ("phonenumberverif", "Phone number verification token"),
                            ("invite", "Invite token"),
                        ],
                        max_length=17,
                        verbose_name="Token type",
                    ),
                ),
                ("hash", models.CharField(max_length=128, verbose_name="Salt and a hashed token")),
                ("tries_left", models.SmallIntegerField(verbose_name="Number of tries left")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                (
                    "email_object",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="kamu.emailaddress"),
                ),
                (
                    "membership",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="kamu.membership"),
                ),
                (
                    "phone_object",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="kamu.phonenumber"),
                ),
            ],
            options={
                "verbose_name": "Login token",
                "verbose_name_plural": "Login tokens",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("identifier", models.CharField(max_length=20, unique=True, verbose_name="Role identifier")),
                ("name_fi", models.CharField(max_length=50, verbose_name="Role name (fi)")),
                ("name_en", models.CharField(max_length=50, verbose_name="Role name (en)")),
                ("name_sv", models.CharField(max_length=50, verbose_name="Role name (sv)")),
                ("description_fi", models.CharField(max_length=255, verbose_name="Role description (fi)")),
                ("description_en", models.CharField(max_length=255, verbose_name="Role description (en)")),
                ("description_sv", models.CharField(max_length=255, verbose_name="Role description (sv)")),
                ("organisation_unit", models.CharField(max_length=20, verbose_name="Organisation unit")),
                ("iam_group", models.CharField(blank=True, max_length=20, verbose_name="IAM Group")),
                ("maximum_duration", models.IntegerField(verbose_name="Maximum duration (days)")),
                (
                    "purge_delay",
                    models.IntegerField(
                        blank=True,
                        help_text="Grace period from membership expiration to purge (days)",
                        null=True,
                        verbose_name="Purge delay (days)",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
                (
                    "approvers",
                    models.ManyToManyField(
                        blank=True, related_name="role_approvers", to="auth.group", verbose_name="Approver groups"
                    ),
                ),
                (
                    "inviters",
                    models.ManyToManyField(
                        blank=True, related_name="role_inviters", to="auth.group", verbose_name="Inviter groups"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="kamu.role",
                    ),
                ),
                ("permissions", models.ManyToManyField(blank=True, to="kamu.permission", verbose_name="Permissions")),
                (
                    "requirements",
                    models.ManyToManyField(
                        blank=True,
                        related_name="role_requirements",
                        to="kamu.requirement",
                        verbose_name="Requirements",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "permissions": [("search_roles", "Can search roles")],
            },
        ),
        migrations.AddConstraint(
            model_name="requirement",
            constraint=models.UniqueConstraint(fields=("type", "value", "grace"), name="unique_requirement"),
        ),
        migrations.AddField(
            model_name="phonenumber",
            name="identity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="phone_numbers", to="kamu.identity"
            ),
        ),
        migrations.AddField(
            model_name="permission",
            name="requirements",
            field=models.ManyToManyField(
                blank=True, related_name="permission_requirements", to="kamu.requirement", verbose_name="Requirements"
            ),
        ),
        migrations.AddField(
            model_name="membership",
            name="approver",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="membership_approver",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="membership",
            name="identity",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="kamu.identity"
            ),
        ),
        migrations.AddField(
            model_name="membership",
            name="inviter",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="membership_inviter",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="membership",
            name="role",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="kamu.role"),
        ),
        migrations.AddField(
            model_name="identity",
            name="nationality",
            field=models.ManyToManyField(
                help_text="Required for the user identification from the official identity documents.",
                to="kamu.nationality",
            ),
        ),
        migrations.AddField(
            model_name="identity",
            name="roles",
            field=models.ManyToManyField(through="kamu.Membership", to="kamu.role"),
        ),
        migrations.AddField(
            model_name="identity",
            name="user",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="identifier",
            name="identity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="identifiers", to="kamu.identity"
            ),
        ),
        migrations.AddField(
            model_name="emailaddress",
            name="identity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="email_addresses", to="kamu.identity"
            ),
        ),
        migrations.AddConstraint(
            model_name="contracttemplate",
            constraint=models.UniqueConstraint(fields=("type", "version"), name="unique_contract_template"),
        ),
        migrations.AddField(
            model_name="contract",
            name="identity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="contracts", to="kamu.identity"
            ),
        ),
        migrations.AddField(
            model_name="contract",
            name="template",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="kamu.contracttemplate"),
        ),
        migrations.AddConstraint(
            model_name="phonenumber",
            constraint=models.UniqueConstraint(fields=("identity", "number"), name="unique_phone_number"),
        ),
        migrations.AddConstraint(
            model_name="emailaddress",
            constraint=models.UniqueConstraint(fields=("identity", "address"), name="unique_email_address"),
        ),
        migrations.AddConstraint(
            model_name="contract",
            constraint=models.UniqueConstraint(fields=("identity", "template"), name="unique_contract"),
        ),
    ]
